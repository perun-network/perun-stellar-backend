// Copyright 2024 PolyCrypt GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wire_test

import (
	"fmt"
	"github.com/stretchr/testify/require"
	"math/big"
	"perun.network/go-perun/channel"
	ptest "perun.network/go-perun/channel/test"
	_ "perun.network/perun-stellar-backend/channel/test"
	"perun.network/perun-stellar-backend/wire"
	polytest "polycry.pt/poly-go/test"
	"testing"
)

func TestState(t *testing.T) {
	// State XDR generated by soroban contract
	x := []byte{0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0, 8, 98, 97, 108, 97, 110, 99, 101, 115, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 5, 98, 97, 108, 95, 97, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 15, 0, 0, 0, 5, 98, 97, 108, 95, 98, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 15, 0, 0, 0, 6, 116, 111, 107, 101, 110, 115, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 5, 99, 104, 97, 105, 110, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 15, 0, 0, 0, 11, 101, 116, 104, 95, 97, 100, 100, 114, 101, 115, 115, 0, 0, 0, 0, 13, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 15, 115, 116, 101, 108, 108, 97, 114, 95, 97, 100, 100, 114, 101, 115, 115, 0, 0, 0, 0, 18, 0, 0, 0, 1, 4, 202, 219, 74, 87, 15, 210, 228, 101, 46, 129, 65, 1, 80, 153, 18, 204, 230, 201, 162, 50, 93, 110, 236, 141, 113, 0, 202, 248, 89, 243, 224, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 5, 99, 104, 97, 105, 110, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 11, 101, 116, 104, 95, 97, 100, 100, 114, 101, 115, 115, 0, 0, 0, 0, 13, 0, 0, 0, 20, 216, 218, 107, 242, 105, 100, 175, 157, 126, 237, 158, 3, 229, 52, 21, 211, 122, 169, 96, 69, 0, 0, 0, 15, 0, 0, 0, 15, 115, 116, 101, 108, 108, 97, 114, 95, 97, 100, 100, 114, 101, 115, 115, 0, 0, 0, 0, 18, 0, 0, 0, 1, 4, 202, 219, 74, 87, 15, 210, 228, 101, 46, 129, 65, 1, 80, 153, 18, 204, 230, 201, 162, 50, 93, 110, 236, 141, 113, 0, 202, 248, 89, 243, 224, 0, 0, 0, 15, 0, 0, 0, 10, 99, 104, 97, 110, 110, 101, 108, 95, 105, 100, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 32, 255, 170, 185, 122, 29, 87, 35, 204, 62, 248, 24, 2, 144, 122, 233, 98, 14, 254, 24, 131, 139, 116, 7, 158, 91, 228, 220, 22, 110, 177, 245, 216, 0, 0, 0, 13, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 9, 102, 105, 110, 97, 108, 105, 122, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0}
	// x := []byte{0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0, 8, 98, 97, 108, 97, 110, 99, 101, 115, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 5, 98, 97, 108, 95, 97, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 15, 0, 0, 0, 5, 98, 97, 108, 95, 98, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 15, 0, 0, 0, 6, 116, 111, 107, 101, 110, 115, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 15, 0, 0, 0, 5, 67, 114, 111, 115, 115, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 15, 0, 0, 0, 7, 97, 100, 100, 114, 101, 115, 115, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 15, 0, 0, 0, 7, 83, 116, 101, 108, 108, 97, 114, 0, 0, 0, 0, 18, 0, 0, 0, 1, 4, 202, 219, 74, 87, 15, 210, 228, 101, 46, 129, 65, 1, 80, 153, 18, 204, 230, 201, 162, 50, 93, 110, 236, 141, 113, 0, 202, 248, 89, 243, 224, 0, 0, 0, 15, 0, 0, 0, 5, 99, 104, 97, 105, 110, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 15, 0, 0, 0, 7, 97, 100, 100, 114, 101, 115, 115, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 15, 0, 0, 0, 7, 83, 116, 101, 108, 108, 97, 114, 0, 0, 0, 0, 18, 0, 0, 0, 1, 246, 91, 212, 216, 146, 224, 82, 206, 219, 161, 253, 98, 151, 78, 86, 79, 250, 146, 38, 202, 114, 6, 36, 243, 49, 195, 103, 112, 190, 164, 108, 68, 0, 0, 0, 15, 0, 0, 0, 5, 99, 104, 97, 105, 110, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 10, 99, 104, 97, 110, 110, 101, 108, 95, 105, 100, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 32, 251, 3, 97, 110, 71, 171, 38, 48, 48, 1, 187, 134, 178, 232, 79, 206, 26, 76, 86, 243, 61, 242, 220, 155, 159, 6, 143, 100, 121, 71, 168, 241, 0, 0, 0, 13, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 9, 102, 105, 110, 97, 108, 105, 122, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0}
	// x := []byte{0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0, 8, 98, 97, 108, 97, 110, 99, 101, 115, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 5, 98, 97, 108, 95, 97, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 15, 0, 0, 0, 5, 98, 97, 108, 95, 98, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 15, 0, 0, 0, 6, 116, 111, 107, 101, 110, 115, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 15, 0, 0, 0, 5, 77, 117, 108, 116, 105, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 18, 0, 0, 0, 1, 128, 17, 187, 244, 205, 240, 78, 91, 198, 172, 136, 105, 53, 185, 154, 164, 178, 192, 202, 189, 225, 51, 249, 215, 251, 62, 101, 103, 153, 240, 168, 150, 0, 0, 0, 18, 0, 0, 0, 1, 4, 202, 219, 74, 87, 15, 210, 228, 101, 46, 129, 65, 1, 80, 153, 18, 204, 230, 201, 162, 50, 93, 110, 236, 141, 113, 0, 202, 248, 89, 243, 224, 0, 0, 0, 15, 0, 0, 0, 10, 99, 104, 97, 110, 110, 101, 108, 95, 105, 100, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 13, 0, 0, 0, 32, 67, 10, 54, 211, 103, 126, 107, 53, 24, 198, 59, 98, 214, 95, 254, 137, 160, 69, 153, 105, 24, 224, 6, 4, 160, 110, 237, 72, 121, 63, 227, 103, 0, 0, 0, 13, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 9, 102, 105, 110, 97, 108, 105, 122, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0}
	state := &wire.State{}
	err := state.UnmarshalBinary(x)
	require.NoError(t, err)
	fmt.Println(state)
	res, err := state.MarshalBinary()
	require.NoError(t, err)
	require.Equal(t, x, res)
}

func TestStateConversion(t *testing.T) {
	rng := polytest.Prng(t)
	perunFirstState := *ptest.NewRandomState(rng,
		ptest.WithNumParts(2),
		ptest.WithBackend(2),
		ptest.WithNumAssets(2),
		ptest.WithNumLocked(0),
		ptest.WithoutApp(),
		ptest.WithBalancesInRange(big.NewInt(0).Mul(big.NewInt(1), big.NewInt(100_000_000)), big.NewInt(0).Mul(big.NewInt(1), big.NewInt(100_000_000))),
	)

	stellarFirstState, err := wire.MakeState(perunFirstState)
	require.NoError(t, err)

	perunLastState, err := wire.ToState(stellarFirstState)
	require.NoError(t, err)

	validatePerunStates(t, perunFirstState, perunLastState)

	stellarLastState, err := wire.MakeState(perunLastState)
	require.NoError(t, err)

	checkStellarStateEquality(t, stellarFirstState, stellarLastState)
}

func validatePerunStates(t *testing.T, first, last channel.State) {
	checkAssetsEquality(t, first, last)
	checkNoLockedAmount(t, first)
	checkNoLockedAmount(t, last)
	checkPerunStateEquality(t, first, last)
}

func checkAssetsEquality(t *testing.T, first, last channel.State) {
	for i, asset := range first.Allocation.Assets {
		require.True(t, asset.Equal(last.Allocation.Assets[i]))
	}
}

func checkNoLockedAmount(t *testing.T, state channel.State) {
	if len(state.Allocation.Locked) != 0 {
		t.Fatal("locked amount should be empty")
	}
}

func checkPerunStateEquality(t *testing.T, first, last channel.State) {
	require.Equal(t, first.IsFinal, last.IsFinal)
	require.True(t, first.ID[2] == last.ID[2])
	require.Equal(t, first.Version, last.Version)
}

func checkStellarStateEquality(t *testing.T, first, last wire.State) {
	require.Equal(t, first.Version, last.Version)
	require.Equal(t, first.ChannelID, last.ChannelID)
	require.Equal(t, first.Finalized, last.Finalized)
	require.Equal(t, first.Balances.BalA, last.Balances.BalA)
	require.Equal(t, first.Balances.BalB, last.Balances.BalB)
	require.Equal(t, first.Balances.Tokens, last.Balances.Tokens)
}
