// Copyright 2023 PolyCrypt GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wire_test

import (
	"github.com/stretchr/testify/require"
	"perun.network/perun-stellar-backend/wallet"
	"perun.network/perun-stellar-backend/wire"
	pkgtest "polycry.pt/poly-go/test"
	"testing"
)

func TestParticipant(t *testing.T) {
	// Participant XDR generated by soroban contract
	x := []byte{0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 7, 99, 99, 95, 97, 100, 100, 114, 0, 0, 0, 0, 13, 0, 0, 0, 20, 86, 253, 40, 156, 238, 113, 74, 94, 71, 28, 65, 132, 54, 239, 166, 62, 120, 13, 122, 135, 0, 0, 0, 15, 0, 0, 0, 12, 115, 116, 101, 108, 108, 97, 114, 95, 97, 100, 100, 114, 0, 0, 0, 18, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 14, 115, 116, 101, 108, 108, 97, 114, 95, 112, 117, 98, 107, 101, 121, 0, 0, 0, 0, 0, 13, 0, 0, 0, 65, 4, 157, 144, 49, 233, 125, 215, 143, 248, 193, 90, 168, 105, 57, 222, 155, 30, 121, 16, 102, 160, 34, 78, 51, 27, 201, 98, 162, 9, 154, 123, 31, 4, 100, 184, 187, 175, 225, 83, 95, 35, 1, 199, 44, 44, 179, 83, 91, 23, 45, 163, 11, 2, 104, 106, 176, 57, 61, 52, 134, 20, 241, 87, 251, 219, 0, 0, 0}
	p := &wire.Participant{}
	err := p.UnmarshalBinary(x)
	require.NoError(t, err)
	res, err := p.MarshalBinary()
	require.NoError(t, err)
	require.Equal(t, x, res)
}

func TestParticipantConversion(t *testing.T) {
	rng := pkgtest.Prng(t)
	acc, _, err := wallet.NewRandomAccount(rng)
	require.NoError(t, err)
	p := *acc.Participant()
	wp, err := wire.MakeParticipant(p)
	require.NoError(t, err)
	res, err := wire.ToParticipant(wp)
	require.NoError(t, err)
	require.True(t, p.Equal(&res))
}
